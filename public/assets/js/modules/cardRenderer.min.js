import*as shortcodeParser from"./shortcodeParser.js";import{isNarrator}from"./auth.js";let appSettings={};export function initializeCardRenderer(t){appSettings=t}export function createCardElement(t){const s=document.createElement("div");return s.className="card",s.dataset.id=t.id,renderCardViewMode(s,t),s}export function renderCardViewMode(t,s){if(t.querySelector(".card-info-layer"))return void updateCardView(t,s);t.classList.remove("editing"),t.classList.remove("has-overlay-content"),t.classList.remove("is-description-only"),t.classList.remove("is-hidden-from-players"),isNarrator()&&!1===s.isVisibleToPlayers&&t.classList.add("is-hidden-from-players");let i="";if(s.url){const e=`padding-bottom: ${s.width&&s.height?s.height/s.width*100:75}%;`,a=s.conteudo?shortcodeParser.parseAllShortcodes(s,appSettings):{},n=s.descricao?s.descricao.replace(/\n/g,"<br>"):"";let o="";const c=Object.values(a).some((t=>t));(c||n)&&(c&&t.classList.add("has-overlay-content"),n&&!c&&t.classList.add("is-description-only"),o=`\n                <div class="card-info-layer">\n                    <div class="info-content">\n                        <div class="info-group-left">${a.left||""}</div>\n                        <div class="info-group-right">${a.right||""}</div>\n                        <div class="info-group-bottom">${a.bottom||""}</div>\n                        <div class="info-group-details">\n                            ${a.details||""}\n                        </div>\n                        ${c&&n?'<hr class="tooltip-divider">':""}\n                        ${n?`<div class="tooltip-description">${n}</div>`:""}\n                    </div>\n                    <div class="info-toggles">\n                        <div class="overlay-item overlay-center toggle-view-icon"><i class="fas fa-info-circle"></i></div>\n                        <button class="tooltip-close-btn" aria-label="Fechar"><i class="fas fa-times"></i></button>\n                    </div>\n                </div>`),i+=`\n            <div class="card-image">\n                <figure class="image" style="${e}">\n                    <img src="${s.url}" alt="${s.titulo}">\n                    ${o}\n                </figure>\n            </div>\n        `}if(i+=`<div class="card-content">\n        <p class="title is-4">${s.titulo}</p>`,s.conteudo){const t=shortcodeParser.parseMainContent(s.conteudo);t&&(i+=`<div class="content">${t}</div>`)}if(s.tags&&s.tags.length>0){i+=`<div class="tags">${s.tags.map((t=>`<span class="tag is-info">${t}</span>`)).join(" ")}</div>`}i+="</div>",t.innerHTML='\n        <div class="card-actions-top">\n            <button class="action-icon view-btn"><i class="fas fa-eye"></i></button>\n            <button class="action-icon edit-btn"><i class="fas fa-pencil-alt"></i></button>\n            <button class="action-icon delete-btn"><i class="fas fa-trash-alt"></i></button>\n        </div>\n    '+i}function updateCardView(t,s){t.classList.remove("editing"),t.classList.remove("has-overlay-content"),t.classList.remove("is-description-only"),t.classList.remove("is-hidden-from-players"),isNarrator()&&!1===s.isVisibleToPlayers&&t.classList.add("is-hidden-from-players");const i=t.querySelector(".card-info-layer");if(i){const e=s.conteudo?shortcodeParser.parseAllShortcodes(s,appSettings):{},a=s.descricao?s.descricao.replace(/\n/g,"<br>"):"",n=Object.values(e).some((t=>t));n&&t.classList.add("has-overlay-content"),a&&!n&&t.classList.add("is-description-only");const o=i.querySelector(".info-content");o&&(o.innerHTML=`\n                <div class="info-group-left">${e.left||""}</div>\n                <div class="info-group-right">${e.right||""}</div>\n                <div class="info-group-bottom">${e.bottom||""}</div>\n                <div class="info-group-details">\n                    ${e.details||""}\n                </div>\n                ${n&&a?'<hr class="tooltip-divider">':""}\n                ${a?`<div class="tooltip-description">${a}</div>`:""}\n            `)}const e=t.querySelector(".card-content");if(e){let t=`<p class="title is-4">${s.titulo}</p>`;if(s.conteudo){const i=shortcodeParser.parseMainContent(s.conteudo);i&&(t+=`<div class="content">${i}</div>`)}s.tags&&s.tags.length>0&&(t+=`<div class="tags">${s.tags.map((t=>`<span class="tag is-info">${t}</span>`)).join(" ")}</div>`),e.innerHTML=t}}export function renderCardEditMode(t,s,i){t.classList.add("editing");let e="";const a=`padding-bottom: ${s.width&&s.height?s.height/s.width*100:56.25}%;`,n=s.url||"";e=`\n        <div class="card-image ${n?"":"is-placeholder"}">\n            <figure class="image" style="${a}">\n                <img src="${n}" alt="${s.titulo||""}">\n                <div class="change-image-overlay">\n                    <label class="button is-light">\n                        <span class="icon is-small"><i class="fas fa-camera"></i></span>\n                        <span>${n?"Trocar":"Adicionar"} Imagem</span>\n                        <input type="file" class="edit-image-input" accept="image/*" style="display: none;">\n                    </label>\n                </div>\n            </figure>\n        </div>\n        <div class="card-content">\n            <div class="field"><div class="control"><input class="input edit-titulo" type="text" value="${s.titulo||""}" placeholder="Título"></div></div>\n            <div class="field"><div class="control"><textarea class="textarea edit-conteudo" placeholder="Conteúdo...">${s.conteudo||""}</textarea></div></div>\n            <div class="field"><div class="control"><textarea class="textarea edit-descricao" placeholder="Descrição (visível ao passar o mouse)">${s.descricao||""}</textarea></div></div>\n            <div class="field"><div class="control"><input class="input edit-tags" type="text" value="${s.tags?.join(", ")||""}" placeholder="Tags"></div></div>\n            ${isNarrator()?`\n                <div class="field">\n                    <label class="checkbox narrator-control">\n                        <input type="checkbox" class="edit-visibility" ${!1!==s.isVisibleToPlayers?"checked":""}>\n                        <span class="switch-track"></span>\n                        <span class="switch-label-text">Visível para jogadores</span>\n                    </label>\n                </div>\n                `:""}\n        </div>\n    `,t.innerHTML='\n        <div class="card-actions-top">\n            <button class="action-icon save-btn"><i class="fas fa-save"></i></button>\n            <button class="action-icon cancel-btn"><i class="fas fa-times-circle"></i></button>\n        </div>'+e;const o=t.querySelector(".edit-tags");o&&i?.onTagInputInit&&i.onTagInputInit(o)}export function getCardFormData(t){const s={titulo:t.querySelector(".edit-titulo").value,conteudo:t.querySelector(".edit-conteudo").value,descricao:t.querySelector(".edit-descricao").value,tags:t.querySelector(".edit-tags").value.split(",").map((t=>t.trim())).filter(Boolean)},i=t.querySelector(".edit-visibility");return i&&(s.isVisibleToPlayers=i.checked),s}export function getImageDimensions(t){return new Promise(((s,i)=>{const e=new FileReader;e.onload=t=>{const e=new Image;e.onload=()=>s({width:e.width,height:e.height}),e.onerror=i,e.src=t.target.result},e.readAsDataURL(t)}))}