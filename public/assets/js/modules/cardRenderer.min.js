import*as shortcodeParser from"./shortcodeParser.js";import{isNarrator}from"./auth.js";export function createCardElement(s){const t=document.createElement("div");return t.className="card",t.dataset.id=s.id,renderCardViewMode(t,s),t}export function renderCardViewMode(s,t){if(s.querySelector(".card-info-layer"))return void updateCardView(s,t);s.classList.remove("editing"),s.classList.remove("has-overlay-content"),s.classList.remove("is-description-only"),s.classList.remove("is-hidden-from-players"),isNarrator()&&!1===t.isVisibleToPlayers&&s.classList.add("is-hidden-from-players");let i="";if(t.url){const e=`padding-bottom: ${t.width&&t.height?t.height/t.width*100:75}%;`,a=t.conteudo?shortcodeParser.parseAllShortcodes(t):{},n=t.descricao?t.descricao.replace(/\n/g,"<br>"):"";let o="";const c=Object.values(a).some((s=>s));(c||n)&&(c&&s.classList.add("has-overlay-content"),n&&!c&&s.classList.add("is-description-only"),o=`\n                <div class="card-info-layer">\n                    <div class="info-content">\n                        <div class="info-group-left">${a.left||""}</div>\n                        <div class="info-group-right">${a.right||""}</div>\n                        <div class="info-group-bottom">${a.bottom||""}</div>\n                        <div class="info-group-details">\n                            ${a.details||""}\n                        </div>\n                        ${c&&n?'<hr class="tooltip-divider">':""}\n                        ${n?`<div class="tooltip-description">${n}</div>`:""}\n                    </div>\n                    <div class="info-toggles">\n                        <div class="overlay-item overlay-center toggle-view-icon"><i class="fas fa-info-circle"></i></div>\n                        <button class="tooltip-close-btn" aria-label="Fechar"><i class="fas fa-times"></i></button>\n                    </div>\n                </div>`),i+=`\n            <div class="card-image">\n                <figure class="image" style="${e}">\n                    <img src="${t.url}" alt="${t.titulo}">\n                    ${o}\n                </figure>\n            </div>\n        `}if(i+=`<div class="card-content">\n        <p class="title is-4">${t.titulo}</p>`,t.conteudo){const s=shortcodeParser.parseMainContent(t.conteudo);s&&(i+=`<div class="content">${s}</div>`)}if(t.tags&&t.tags.length>0){i+=`<div class="tags">${t.tags.map((s=>`<span class="tag is-info">${s}</span>`)).join(" ")}</div>`}i+="</div>",s.innerHTML='\n        <div class="card-actions-top">\n            <button class="action-icon view-btn"><i class="fas fa-eye"></i></button>\n            <button class="action-icon edit-btn"><i class="fas fa-pencil-alt"></i></button>\n            <button class="action-icon delete-btn"><i class="fas fa-trash-alt"></i></button>\n        </div>\n    '+i}function updateCardView(s,t){s.classList.remove("editing"),s.classList.remove("has-overlay-content"),s.classList.remove("is-description-only"),s.classList.remove("is-hidden-from-players"),isNarrator()&&!1===t.isVisibleToPlayers&&s.classList.add("is-hidden-from-players");const i=s.querySelector(".card-info-layer");if(i){const e=t.conteudo?shortcodeParser.parseAllShortcodes(t):{},a=t.descricao?t.descricao.replace(/\n/g,"<br>"):"",n=Object.values(e).some((s=>s));n&&s.classList.add("has-overlay-content"),a&&!n&&s.classList.add("is-description-only");const o=i.querySelector(".info-content");o&&(o.innerHTML=`\n                <div class="info-group-left">${e.left||""}</div>\n                <div class="info-group-right">${e.right||""}</div>\n                <div class="info-group-bottom">${e.bottom||""}</div>\n                <div class="info-group-details">\n                    ${e.details||""}\n                </div>\n                ${n&&a?'<hr class="tooltip-divider">':""}\n                ${a?`<div class="tooltip-description">${a}</div>`:""}\n            `)}const e=s.querySelector(".card-content");if(e){let s=`<p class="title is-4">${t.titulo}</p>`;if(t.conteudo){const i=shortcodeParser.parseMainContent(t.conteudo);i&&(s+=`<div class="content">${i}</div>`)}t.tags&&t.tags.length>0&&(s+=`<div class="tags">${t.tags.map((s=>`<span class="tag is-info">${s}</span>`)).join(" ")}</div>`),e.innerHTML=s}}export function renderCardEditMode(s,t,i){s.classList.add("editing");let e="";const a=`padding-bottom: ${t.width&&t.height?t.height/t.width*100:56.25}%;`,n=t.url||"";e=`\n        <div class="card-image ${n?"":"is-placeholder"}">\n            <figure class="image" style="${a}">\n                <img src="${n}" alt="${t.titulo||""}">\n                <div class="change-image-overlay">\n                    <label class="button is-light">\n                        <span class="icon is-small"><i class="fas fa-camera"></i></span>\n                        <span>${n?"Trocar":"Adicionar"} Imagem</span>\n                        <input type="file" class="edit-image-input" accept="image/*" style="display: none;">\n                    </label>\n                </div>\n            </figure>\n        </div>\n        <div class="card-content">\n            <div class="field"><div class="control"><input class="input edit-titulo" type="text" value="${t.titulo||""}" placeholder="Título"></div></div>\n            <div class="field"><div class="control"><textarea class="textarea edit-conteudo" placeholder="Conteúdo...">${t.conteudo||""}</textarea></div></div>\n            <div class="field"><div class="control"><textarea class="textarea edit-descricao" placeholder="Descrição (visível ao passar o mouse)">${t.descricao||""}</textarea></div></div>\n            <div class="field"><div class="control"><input class="input edit-tags" type="text" value="${t.tags?.join(", ")||""}" placeholder="Tags"></div></div>\n            ${isNarrator()?`\n                <div class="field">\n                    <label class="checkbox narrator-control">\n                        <input type="checkbox" class="edit-visibility" ${!1!==t.isVisibleToPlayers?"checked":""}>\n                        <span class="switch-track"></span>\n                        <span class="switch-label-text">Visível para jogadores</span>\n                    </label>\n                </div>\n                `:""}\n        </div>\n    `,s.innerHTML='\n        <div class="card-actions-top">\n            <button class="action-icon save-btn"><i class="fas fa-save"></i></button>\n            <button class="action-icon cancel-btn"><i class="fas fa-times-circle"></i></button>\n        </div>'+e;const o=s.querySelector(".edit-tags");o&&i?.onTagInputInit&&i.onTagInputInit(o)}export function getCardFormData(s){const t={titulo:s.querySelector(".edit-titulo").value,conteudo:s.querySelector(".edit-conteudo").value,descricao:s.querySelector(".edit-descricao").value,tags:s.querySelector(".edit-tags").value.split(",").map((s=>s.trim())).filter(Boolean)},i=s.querySelector(".edit-visibility");return i&&(t.isVisibleToPlayers=i.checked),t}export function getImageDimensions(s){return new Promise(((t,i)=>{const e=new FileReader;e.onload=s=>{const e=new Image;e.onload=()=>t({width:e.width,height:e.height}),e.onerror=i,e.src=s.target.result},e.readAsDataURL(s)}))}