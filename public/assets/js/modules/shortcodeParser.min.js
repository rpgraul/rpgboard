const ALWAYS_VISIBLE_COMMANDS=["stat"];function _parseArguments(t){const e=/"([^"]+)"|\S+/g,n=[];let s;for(;null!==(s=e.exec(t));)n.push(s[1]||s[0]);return n}function _parseKeyValueArgs(t){const e={};return t.forEach((t=>{const n=t.split("=");2===n.length&&(e[n[0].toLowerCase()]=n[1])})),e}function _parseStat(t){const e=["left","right","bottom"],n=t.filter((t=>!e.includes(t)));if(0===n.length)return"";if(1===n.length||"null"===n[0].toLowerCase()){return`<div class="shortcode-stat">${(1===n.length?n[0]:n.slice(1).join(" "))||""}</div>`}const s=n[n.length-1];return`<div class="shortcode-stat"><strong>${n.slice(0,-1).join(" ")}:</strong> ${s||""}</div>`}function _parseHp(t,e,n){const s=_parseKeyValueArgs(t),a=parseInt(s.max,10)||100,o=void 0!==s.current?parseInt(s.current,10):a,r=Math.max(0,Math.min(o,a));return`<div class="shortcode-hp" data-item-id="${e}" data-shortcode="${encodeURIComponent(n)}" data-max-hp="${a}"><strong class="hp-label">PV</strong><div class="hp-input-wrapper"><input type="number" class="hp-current-input" value="${r}" max="${a}" min="0"><span class="hp-max-value">/ ${a}</span></div></div>`}export function parseHpShortcode(t){if(!t||!t.conteudo)return"";const e=t.conteudo.match(/\[hp\s+(.*?)\]/);if(e){return _parseHp(_parseArguments(e[1]),t.id,e[0])}return""}function _parseCount(t,e,n){const s=["left","right","bottom"],a=t.includes("checkbox"),o=t.filter((t=>"checkbox"!==t&&!s.includes(t))),r=_parseKeyValueArgs(o.filter((t=>t.includes("="))));let c="number";r.icon?c="custom-icon":r.theme?c=r.theme:a&&(c="default");const i=o.find((t=>!t.includes("=")))||"",l=parseInt(r.max,10)||0;let u=void 0!==r.current?parseInt(r.current,10):l;if(u=Math.max(0,Math.min(u,l)),!i&&0===l)return"";const p=`data-item-id="${e}" data-shortcode="${encodeURIComponent(n)}"`;let d="";if(["default","arrow","potion","custom-icon"].includes(c)&&l>0){d=`<span class="count-checkboxes-interactive theme-${c}">`;for(let t=1;t<=l;t++){const e=t<=u;let n="";if("arrow"===c)n='<i class="fas fa-arrow-up"></i>';else if("potion"===c)n='<i class="fas fa-flask"></i>';else if("custom-icon"===c){n=`<i class="fas fa-${r.icon.replace(/["']/g,"")}"></i>`}d+=`<span class="count-checkbox ${e?"is-checked":""}" data-value="${t}" role="button" tabindex="0">${n}</span>`}d+="</span>"}else d=`\n            <span class="count-value-interactive">\n                <button class="count-btn" data-action="decrement" aria-label="Diminuir">-</button>\n                <span class="count-current-value">${u}</span>\n                <span class="count-separator">/</span>\n                <span class="count-max-value">${l}</span>\n                <button class="count-btn" data-action="increment" aria-label="Aumentar">+</button>\n            </span>\n        `.trim().replace(/\s+/g," ");return d=`<div class="count-representation">${d}</div>`,`<div class="shortcode-count is-interactive" ${p}>${i?`<strong class="count-name">${i}:</strong> `:""}${d}</div>`}export function parseMainContent(t){if(!t)return"";let e=t.replace(/\[(.*?)\]/g,((t,e)=>{const n=_parseArguments(e),s=n[0]||"",a=(n.slice(1),s.replace("*",""));return s.startsWith("*")||ALWAYS_VISIBLE_COMMANDS.includes(a.toLowerCase())||["hp","count"].includes(a.toLowerCase())?"":t}));return e=e.trim(),e.replace(/\n/g,"<br>").replace(/(<br>\s*){2,}/g,"<br>")}export function parseAllShortcodes(t){if(!t||!t.conteudo)return{left:"",right:"",bottom:"",details:""};const e={left:[],right:[],bottom:[],details:[]},n={stat:1,hp:2,count:3,default:99},s=[];return t.conteudo.replace(/\[(.*?)\]/g,((t,e)=>{const n=_parseArguments(e),a=(n[0]||"").replace("*","").toLowerCase(),o=n.slice(1);["stat","hp","count"].includes(a)&&s.push({command:a,args:o,originalShortcode:t})})),s.sort(((t,e)=>(n[t.command]||n.default)-(n[e.command]||n.default))),s.forEach((n=>{let s=null;n.args.includes("left")?s="left":n.args.includes("right")?s="right":n.args.includes("bottom")&&(s="bottom");let a="";switch(n.command){case"stat":a=_parseStat(n.args),e[s||"left"].push(a);break;case"hp":a=_parseHp(n.args,t.id,n.originalShortcode),e[s||"bottom"].push(a);break;case"count":const o=n.originalShortcode.includes("[*count"),r=_parseCount(n.args,t.id,n.originalShortcode);o?e[s||"right"].push(r):s?e[s].push(r):e.details.push(r)}})),{left:e.left.join(""),right:e.right.join(""),bottom:e.bottom.join(""),details:e.details.join("")}}