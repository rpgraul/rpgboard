import{collection,addDoc,onSnapshot,doc,deleteDoc,updateDoc,serverTimestamp,query,orderBy,writeBatch,getDoc,setDoc,getDocs,arrayUnion,deleteField}from"https://www.gstatic.com/firebasejs/9.15.0/firebase-firestore.js";const{db:db}=window.firebaseInstances;async function uploadImageToImgBB(e){const o=window.IMGBB_API_KEY;if(!o)throw console.error("Chave da API do ImgBB não foi encontrada em window.IMGBB_API_KEY"),new Error("Chave da API do ImgBB não configurada.");const t=new FormData;t.append("image",e);try{const e=await fetch(`https://api.imgbb.com/1/upload?key=${o}`,{method:"POST",body:t});if(!e.ok){const o=await e.json();throw console.error("Erro da API do ImgBB:",o),new Error(`Falha no upload para o ImgBB: ${o.error.message}`)}const a=await e.json();if(a&&a.data&&a.data.url)return{url:a.data.url};throw console.error("Resposta inesperada do ImgBB:",a),new Error("Formato de resposta inesperado do ImgBB.")}catch(e){throw console.error("Erro crítico ao fazer upload da imagem para o ImgBB:",e),e}}const itemsCollectionRef=collection(db,"rpg-items"),usersCollectionRef=collection(db,"rpg-users");export async function saveUser(e){const o=doc(usersCollectionRef,e.toLowerCase());await setDoc(o,{name:e,lastSeen:serverTimestamp()},{merge:!0})}export function listenToItems(e){const o=query(itemsCollectionRef,orderBy("order","asc"));return onSnapshot(o,e)}export async function addItem(e,o=null){const t=(await getDocs(itemsCollectionRef)).size,a={...e,createdAt:serverTimestamp(),order:t+1};if(o){const e=await uploadImageToImgBB(o);a.url=e.url}return(await addDoc(itemsCollectionRef,a)).id}export async function deleteItem(e){const o=doc(db,"rpg-items",e.id);return deleteDoc(o)}export async function deleteItems(e){const o=writeBatch(db);for(const t of e){const e=doc(db,"rpg-items",t);o.delete(e)}await o.commit(),console.log(`${e.length} itens deletados com sucesso do Firestore.`)}export async function updateItem(e,o,t=null){if(console.log("updateItem (usando ImgBB) chamado com:",e,o,t),t)try{const e=await uploadImageToImgBB(t);o.url=e.url,o.storagePath=deleteField()}catch(e){throw console.error("Erro ao fazer upload da nova imagem para o ImgBB:",e),new Error("Falha ao fazer upload da imagem")}const a=doc(db,"rpg-items",e.id);return updateDoc(a,o)}export async function removeImageFromItem(e){if(!e||!e.id)throw new Error("É necessário um item válido para remover sua imagem.");const o=doc(db,"rpg-items",e.id);await updateDoc(o,{url:deleteField(),storagePath:deleteField()})}export async function updateItemsOrder(e){const o=writeBatch(db);e.forEach(((e,t)=>{const a=doc(db,"rpg-items",e);o.update(a,{order:t})})),await o.commit()}export async function getItemsCount(){return(await getDocs(itemsCollectionRef)).size}export async function getSettings(){const e=doc(db,"config","mainSettings"),o=await getDoc(e);return o.exists()?o.data():(console.warn("Documento de configurações 'mainSettings' não encontrado. Usando valores padrão."),{siteTitle:"RPG Painel",recommendedTags:["NPC","Aliado"],filters:[{label:"PJs",value:"pj"}]})}export async function saveSettings(e){const o=doc(db,"config","mainSettings");await setDoc(o,e,{merge:!0})}export async function updateItemsVisibility(e,o){const t=writeBatch(db);e.forEach((e=>{const a=doc(db,"rpg-items",e);t.update(a,{isVisibleToPlayers:o})})),await t.commit()}export async function addTagsToItems(e,o){const t=writeBatch(db);return e.forEach((e=>{const a=doc(db,"rpg-items",e);t.update(a,{tags:arrayUnion(...o)})})),t.commit()}