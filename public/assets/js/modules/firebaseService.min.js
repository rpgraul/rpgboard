import{collection,addDoc,onSnapshot,doc,deleteDoc,updateDoc,serverTimestamp,query,orderBy,writeBatch,getDoc,setDoc,getDocs,arrayUnion,deleteField}from"https://www.gstatic.com/firebasejs/9.15.0/firebase-firestore.js";import{uploadImage}from"./imgbbService.js";const{db:db}=window.firebaseInstances,itemsCollectionRef=collection(db,"rpg-items"),usersCollectionRef=collection(db,"rpg-users");export async function saveUser(e){const t=doc(usersCollectionRef,e.toLowerCase());await setDoc(t,{name:e,lastSeen:serverTimestamp()},{merge:!0})}export function listenToItems(e){const t=query(itemsCollectionRef,orderBy("order","asc"));return onSnapshot(t,e)}export async function addItem(e,t=null){const o=(await getDocs(itemsCollectionRef)).size,a={...e,createdAt:serverTimestamp(),order:o+1};if(t)try{const e=await uploadImage(t);a.url=e.url,a.deleteUrl=e.deleteUrl}catch(e){throw console.error("Erro ao fazer upload da imagem:",e),new Error("Falha ao fazer upload da imagem")}return(await addDoc(itemsCollectionRef,a)).id}export async function deleteItem(e){e.deleteUrl&&console.log(`Imagem pode ser deletada manualmente em: ${e.deleteUrl}`);const t=doc(db,"rpg-items",e.id);return deleteDoc(t)}export async function deleteItems(e){const t=writeBatch(db);for(const o of e){const e=doc(db,"rpg-items",o);try{const t=await getDoc(e);if(t.exists()){const e=t.data();e.deleteUrl&&console.log(`Imagem pode ser deletada manualmente em: ${e.deleteUrl}`)}}catch(e){console.error(`Erro ao buscar o item ${o} para deleção:`,e)}t.delete(e)}await t.commit(),console.log(`${e.length} itens deletados com sucesso.`)}export async function updateItem(e,t,o=null){if(console.log("updateItem called with:",e,t,o),o)try{const a=await uploadImage(o);t.url=a.url,t.deleteUrl=a.deleteUrl,t.storagePath=deleteField(),e.deleteUrl&&console.log(`Imagem antiga pode ser deletada manualmente em: ${e.deleteUrl}`)}catch(e){throw console.error("Erro ao fazer upload da nova imagem:",e),new Error("Falha ao fazer upload da imagem")}const a=doc(db,"rpg-items",e.id);return updateDoc(a,t)}export async function removeImageFromItem(e){if(!e||!e.id)throw new Error("É necessário um item válido para remover sua imagem.");e.deleteUrl&&console.log(`Imagem pode ser deletada manualmente em: ${e.deleteUrl}`);const t=doc(db,"rpg-items",e.id);await updateDoc(t,{url:deleteField(),deleteUrl:deleteField(),storagePath:deleteField()})}export async function updateItemsOrder(e){const{db:t}=window.firebaseInstances||{};console.log("updateItemsOrder called with:",e);const o=writeBatch(t);e.forEach(((e,a)=>{const r=doc(t,"rpg-items",e);o.update(r,{order:a})})),await o.commit()}export async function getItemsCount(){return(await getDocs(itemsCollectionRef)).size}export async function getSettings(){const e=doc(db,"config","mainSettings"),t=await getDoc(e);return t.exists()?t.data():(console.warn("Documento de configurações 'mainSettings' não encontrado. Usando valores padrão."),{siteTitle:"RPG Painel",recommendedTags:["NPC","Aliado"],filters:[{label:"PJs",value:"pjs"}]})}export async function saveSettings(e){const t=doc(db,"config","mainSettings");await setDoc(t,e,{merge:!0})}export async function updateItemsVisibility(e,t){const o=writeBatch(db);e.forEach((e=>{const a=doc(db,"rpg-items",e);o.update(a,{isVisibleToPlayers:t})})),await o.commit()}export async function addTagsToItems(e,t){const o=writeBatch(db);return e.forEach((e=>{const a=doc(db,"rpg-items",e);o.update(a,{tags:arrayUnion(...t)})})),o.commit()}