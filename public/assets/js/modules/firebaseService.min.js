import{collection,addDoc,onSnapshot,doc,deleteDoc,updateDoc,serverTimestamp,query,orderBy,writeBatch,getDoc,setDoc,getDocs,arrayUnion,deleteField}from"https://www.gstatic.com/firebasejs/9.15.0/firebase-firestore.js";import{ref,uploadBytes,getDownloadURL,deleteObject}from"https://www.gstatic.com/firebasejs/9.15.0/firebase-storage.js";const{db:db,storage:storage}=window.firebaseInstances,itemsCollectionRef=collection(db,"rpg-items"),usersCollectionRef=collection(db,"rpg-users");export async function saveUser(e){const t=doc(usersCollectionRef,e.toLowerCase());await setDoc(t,{name:e,lastSeen:serverTimestamp()},{merge:!0})}export function listenToItems(e){const t=query(itemsCollectionRef,orderBy("order","asc"));return onSnapshot(t,e)}export async function addItem(e,t=null){const o=(await getDocs(itemsCollectionRef)).size,a={...e,createdAt:serverTimestamp(),order:o+1};if(t){const e=ref(storage,`images/${Date.now()}_${t.name}`);await uploadBytes(e,t),a.url=await getDownloadURL(e),a.storagePath=e.fullPath}return(await addDoc(itemsCollectionRef,a)).id}export async function deleteItem(e){if(e.storagePath){const t=ref(storage,e.storagePath);console.log(`Tentando deletar imagem do storage: ${e.storagePath}`),await deleteObject(t).catch((e=>{console.error("Falha ao deletar imagem do storage, mas o item será deletado do banco de dados:",e)}))}const t=doc(db,"rpg-items",e.id);return deleteDoc(t)}export async function deleteItems(e){const t=writeBatch(db),o=[];for(const a of e){const e=doc(db,"rpg-items",a);try{const t=await getDoc(e);if(t.exists()){const e=t.data();if(e.storagePath){const t=ref(storage,e.storagePath);o.push(deleteObject(t).catch((t=>console.error(`Falha ao deletar imagem ${e.storagePath}:`,t))))}}}catch(e){console.error(`Erro ao buscar o item ${a} para deleção:`,e)}t.delete(e)}await t.commit(),await Promise.all(o),console.log(`${e.length} itens deletados com sucesso.`)}export async function updateItem(e,t,o=null){if(console.log("updateItem called with:",e,t,o),o){const a=ref(storage,`images/${Date.now()}_${o.name}`);if(await uploadBytes(a,o),t.url=await getDownloadURL(a),t.storagePath=a.fullPath,e.storagePath){const t=ref(storage,e.storagePath);console.log(`Tentando deletar imagem antiga do storage: ${e.storagePath}`),await deleteObject(t).catch((e=>{console.warn("Não foi possível deletar a imagem antiga (pode já ter sido removida ou o caminho é inválido):",e)}))}}const a=doc(db,"rpg-items",e.id);return updateDoc(a,t)}export async function removeImageFromItem(e){if(!e||!e.id)throw new Error("É necessário um item válido para remover sua imagem.");if(e.storagePath){const t=ref(storage,e.storagePath);try{await deleteObject(t),console.log(`Imagem em '${e.storagePath}' deletada do Storage.`)}catch(e){"storage/object-not-found"!==e.code&&console.error("Erro ao deletar imagem do Storage:",e)}}const t=doc(db,"rpg-items",e.id);await updateDoc(t,{url:deleteField(),storagePath:deleteField()})}export async function updateItemsOrder(e){const{db:t,storage:o}=window.firebaseInstances||{};console.log("updateItemsOrder called with:",e);const a=writeBatch(t);e.forEach(((e,o)=>{const s=doc(t,"rpg-items",e);a.update(s,{order:o})})),await a.commit()}export async function getItemsCount(){return(await getDocs(itemsCollectionRef)).size}export async function getSettings(){const e=doc(db,"config","mainSettings"),t=await getDoc(e);return t.exists()?t.data():(console.warn("Documento de configurações 'mainSettings' não encontrado. Usando valores padrão."),{siteTitle:"RPG Painel",recommendedTags:["NPC","Aliado"],filters:[{label:"PJs",value:"pjs"}]})}export async function saveSettings(e){const t=doc(db,"config","mainSettings");await setDoc(t,e,{merge:!0})}export async function updateItemsVisibility(e,t){const o=writeBatch(db);e.forEach((e=>{const a=doc(db,"rpg-items",e);o.update(a,{isVisibleToPlayers:t})})),await o.commit()}export async function addTagsToItems(e,t){const o=writeBatch(db);return e.forEach((e=>{const a=doc(db,"rpg-items",e);o.update(a,{tags:arrayUnion(...t)})})),o.commit()}
