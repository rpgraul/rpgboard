import{collection,addDoc,onSnapshot,doc,deleteDoc,updateDoc,serverTimestamp,query,orderBy,writeBatch,getDoc,setDoc}from"https://www.gstatic.com/firebasejs/9.15.0/firebase-firestore.js";import{ref,uploadBytes,getDownloadURL,deleteObject}from"https://www.gstatic.com/firebasejs/9.15.0/firebase-storage.js";const{db:db,storage:storage}=window.firebaseInstances,itemsCollectionRef=collection(db,"rpg-items");export function listenToItems(e){const t=query(itemsCollectionRef,orderBy("order","asc"));return onSnapshot(t,e)}export async function addItem(e,t=null){const o={...e,createdAt:serverTimestamp(),order:itemsCount+1};if(t){const e=ref(storage,`images/${Date.now()}_${t.name}`);await uploadBytes(e,t),o.url=await getDownloadURL(e),o.storagePath=e.fullPath}return addDoc(itemsCollectionRef,o)}export async function deleteItem(e){if(e.storagePath){const t=ref(storage,e.storagePath);console.log(`Tentando deletar imagem do storage: ${e.storagePath}`),await deleteObject(t).catch((e=>{console.error("Falha ao deletar imagem do storage, mas o item será deletado do banco de dados:",e)}))}const t=doc(db,"rpg-items",e.id);return deleteDoc(t)}export async function updateItem(e,t,o=null){if(console.log("updateItem called with:",e,t,o),o){const a=ref(storage,`images/${Date.now()}_${o.name}`);if(await uploadBytes(a,o),t.url=await getDownloadURL(a),t.storagePath=a.fullPath,e.storagePath){const t=ref(storage,e.storagePath);console.log(`Tentando deletar imagem antiga do storage: ${e.storagePath}`),await deleteObject(t).catch((e=>{console.warn("Não foi possível deletar a imagem antiga (pode já ter sido removida ou o caminho é inválido):",e)}))}}const a=doc(db,"rpg-items",e.id);return updateDoc(a,t)}export async function updateItemsOrder(e){const{db:t,storage:o}=window.firebaseInstances||{};console.log("updateItemsOrder called with:",e);const a=writeBatch(t);e.forEach(((e,o)=>{const s=doc(t,"rpg-items",e);a.update(s,{order:o})})),await a.commit()}export async function getItemsCount(){return(await getDocs(itemsCollectionRef)).size}export async function getSettings(){const e=doc(db,"config","mainSettings"),t=await getDoc(e);return t.exists()?t.data():(console.warn("Documento de configurações 'mainSettings' não encontrado. Usando valores padrão."),{siteTitle:"RPG Painel",recommendedTags:["NPC","Aliado"],filters:[{label:"PJs",value:"pjs"}]})}export async function saveSettings(e){const t=doc(db,"config","mainSettings");await setDoc(t,e,{merge:!0})}export async function updateItemsVisibility(e,t){const o=writeBatch(db);e.forEach((e=>{const a=doc(db,"rpg-items",e);o.update(a,{isVisibleToPlayers:t})})),await o.commit()}